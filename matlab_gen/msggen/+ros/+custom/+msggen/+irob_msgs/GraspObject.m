classdef GraspObject < ros.Message
    %GraspObject MATLAB implementation of irob_msgs/GraspObject
    %   This class was automatically generated by
    %   ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2019 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'irob_msgs/GraspObject' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '69e52b7b5f8583955ccc746242cdac26' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        GeometryMsgsPointClass = ros.msg.internal.MessageFactory.getClassForType('geometry_msgs/Point') % Dispatch to MATLAB class for message type geometry_msgs/Point
    end
    
    properties (Dependent)
        Id
        Name
        Position
        GraspPosition
        ApproachPosition
        GraspDiameter
    end
    
    properties (Access = protected)
        Cache = struct('Position', [], 'GraspPosition', [], 'ApproachPosition', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'ApproachPosition', 'GraspDiameter', 'GraspPosition', 'Id', 'Name', 'Position'} % List of non-constant message properties
        ROSPropertyList = {'approach_position', 'grasp_diameter', 'grasp_position', 'id', 'name', 'position'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = GraspObject(msg)
            %GraspObject Construct the message object GraspObject
            import com.mathworks.toolbox.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('ros:mlros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('ros:mlros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('ros:mlros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function id = get.Id(obj)
            %get.Id Get the value for property Id
            id = int8(obj.JavaMessage.getId);
        end
        
        function set.Id(obj, id)
            %set.Id Set the value for property Id
            validateattributes(id, {'numeric'}, {'nonempty', 'scalar'}, 'GraspObject', 'Id');
            
            obj.JavaMessage.setId(id);
        end
        
        function name = get.Name(obj)
            %get.Name Get the value for property Name
            name = char(obj.JavaMessage.getName);
        end
        
        function set.Name(obj, name)
            %set.Name Set the value for property Name
            name = convertStringsToChars(name);
            
            validateattributes(name, {'char', 'string'}, {}, 'GraspObject', 'Name');
            
            obj.JavaMessage.setName(name);
        end
        
        function position = get.Position(obj)
            %get.Position Get the value for property Position
            if isempty(obj.Cache.Position)
                obj.Cache.Position = feval(obj.GeometryMsgsPointClass, obj.JavaMessage.getPosition);
            end
            position = obj.Cache.Position;
        end
        
        function set.Position(obj, position)
            %set.Position Set the value for property Position
            validateattributes(position, {obj.GeometryMsgsPointClass}, {'nonempty', 'scalar'}, 'GraspObject', 'Position');
            
            obj.JavaMessage.setPosition(position.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Position)
                obj.Cache.Position.setJavaObject(position.getJavaObject);
            end
        end
        
        function graspposition = get.GraspPosition(obj)
            %get.GraspPosition Get the value for property GraspPosition
            if isempty(obj.Cache.GraspPosition)
                obj.Cache.GraspPosition = feval(obj.GeometryMsgsPointClass, obj.JavaMessage.getGraspPosition);
            end
            graspposition = obj.Cache.GraspPosition;
        end
        
        function set.GraspPosition(obj, graspposition)
            %set.GraspPosition Set the value for property GraspPosition
            validateattributes(graspposition, {obj.GeometryMsgsPointClass}, {'nonempty', 'scalar'}, 'GraspObject', 'GraspPosition');
            
            obj.JavaMessage.setGraspPosition(graspposition.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.GraspPosition)
                obj.Cache.GraspPosition.setJavaObject(graspposition.getJavaObject);
            end
        end
        
        function approachposition = get.ApproachPosition(obj)
            %get.ApproachPosition Get the value for property ApproachPosition
            if isempty(obj.Cache.ApproachPosition)
                obj.Cache.ApproachPosition = feval(obj.GeometryMsgsPointClass, obj.JavaMessage.getApproachPosition);
            end
            approachposition = obj.Cache.ApproachPosition;
        end
        
        function set.ApproachPosition(obj, approachposition)
            %set.ApproachPosition Set the value for property ApproachPosition
            validateattributes(approachposition, {obj.GeometryMsgsPointClass}, {'nonempty', 'scalar'}, 'GraspObject', 'ApproachPosition');
            
            obj.JavaMessage.setApproachPosition(approachposition.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.ApproachPosition)
                obj.Cache.ApproachPosition.setJavaObject(approachposition.getJavaObject);
            end
        end
        
        function graspdiameter = get.GraspDiameter(obj)
            %get.GraspDiameter Get the value for property GraspDiameter
            graspdiameter = double(obj.JavaMessage.getGraspDiameter);
        end
        
        function set.GraspDiameter(obj, graspdiameter)
            %set.GraspDiameter Set the value for property GraspDiameter
            validateattributes(graspdiameter, {'numeric'}, {'nonempty', 'scalar'}, 'GraspObject', 'GraspDiameter');
            
            obj.JavaMessage.setGraspDiameter(graspdiameter);
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Position = [];
            obj.Cache.GraspPosition = [];
            obj.Cache.ApproachPosition = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.Id = obj.Id;
            cpObj.Name = obj.Name;
            cpObj.GraspDiameter = obj.GraspDiameter;
            
            % Recursively copy compound properties
            cpObj.Position = copy(obj.Position);
            cpObj.GraspPosition = copy(obj.GraspPosition);
            cpObj.ApproachPosition = copy(obj.ApproachPosition);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Id = strObj.Id;
            obj.Name = strObj.Name;
            obj.GraspDiameter = strObj.GraspDiameter;
            obj.Position = feval([obj.GeometryMsgsPointClass '.loadobj'], strObj.Position);
            obj.GraspPosition = feval([obj.GeometryMsgsPointClass '.loadobj'], strObj.GraspPosition);
            obj.ApproachPosition = feval([obj.GeometryMsgsPointClass '.loadobj'], strObj.ApproachPosition);
        end
    end
    
    methods (Access = ?ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Id = obj.Id;
            strObj.Name = obj.Name;
            strObj.GraspDiameter = obj.GraspDiameter;
            strObj.Position = saveobj(obj.Position);
            strObj.GraspPosition = saveobj(obj.GraspPosition);
            strObj.ApproachPosition = saveobj(obj.ApproachPosition);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.custom.msggen.irob_msgs.GraspObject.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = ros.custom.msggen.irob_msgs.GraspObject;
            obj.reload(strObj);
        end
    end
end
