classdef VisionObject < ros.Message
    %VisionObject MATLAB implementation of irob_msgs/VisionObject
    %   This class was automatically generated by
    %   ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2019 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'irob_msgs/VisionObject' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '6e0dffcaba146169c5dc585f8cda690a' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant)
        RIGID = int8(1)
        SOFT = int8(2)
    end
    
    properties (Constant, Access = protected)
        GeometryMsgsPoseClass = ros.msg.internal.MessageFactory.getClassForType('geometry_msgs/Pose') % Dispatch to MATLAB class for message type geometry_msgs/Pose
        StdMsgsHeaderClass = ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
    end
    
    properties (Dependent)
        Header
        Id
        Name
        Pose
        GraspPose
        GraspDiameter
        Material
    end
    
    properties (Access = protected)
        Cache = struct('Header', [], 'Pose', [], 'GraspPose', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'GraspDiameter', 'GraspPose', 'Header', 'Id', 'Material', 'Name', 'Pose'} % List of non-constant message properties
        ROSPropertyList = {'grasp_diameter', 'grasp_pose', 'header', 'id', 'material', 'name', 'pose'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = VisionObject(msg)
            %VisionObject Construct the message object VisionObject
            import com.mathworks.toolbox.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('ros:mlros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('ros:mlros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('ros:mlros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            if isempty(obj.Cache.Header)
                obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
            end
            header = obj.Cache.Header;
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'VisionObject', 'Header');
            
            obj.JavaMessage.setHeader(header.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Header)
                obj.Cache.Header.setJavaObject(header.getJavaObject);
            end
        end
        
        function id = get.Id(obj)
            %get.Id Get the value for property Id
            id = int8(obj.JavaMessage.getId);
        end
        
        function set.Id(obj, id)
            %set.Id Set the value for property Id
            validateattributes(id, {'numeric'}, {'nonempty', 'scalar'}, 'VisionObject', 'Id');
            
            obj.JavaMessage.setId(id);
        end
        
        function name = get.Name(obj)
            %get.Name Get the value for property Name
            name = char(obj.JavaMessage.getName);
        end
        
        function set.Name(obj, name)
            %set.Name Set the value for property Name
            name = convertStringsToChars(name);
            
            validateattributes(name, {'char', 'string'}, {}, 'VisionObject', 'Name');
            
            obj.JavaMessage.setName(name);
        end
        
        function pose = get.Pose(obj)
            %get.Pose Get the value for property Pose
            if isempty(obj.Cache.Pose)
                obj.Cache.Pose = feval(obj.GeometryMsgsPoseClass, obj.JavaMessage.getPose);
            end
            pose = obj.Cache.Pose;
        end
        
        function set.Pose(obj, pose)
            %set.Pose Set the value for property Pose
            validateattributes(pose, {obj.GeometryMsgsPoseClass}, {'nonempty', 'scalar'}, 'VisionObject', 'Pose');
            
            obj.JavaMessage.setPose(pose.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Pose)
                obj.Cache.Pose.setJavaObject(pose.getJavaObject);
            end
        end
        
        function grasppose = get.GraspPose(obj)
            %get.GraspPose Get the value for property GraspPose
            if isempty(obj.Cache.GraspPose)
                obj.Cache.GraspPose = feval(obj.GeometryMsgsPoseClass, obj.JavaMessage.getGraspPose);
            end
            grasppose = obj.Cache.GraspPose;
        end
        
        function set.GraspPose(obj, grasppose)
            %set.GraspPose Set the value for property GraspPose
            validateattributes(grasppose, {obj.GeometryMsgsPoseClass}, {'nonempty', 'scalar'}, 'VisionObject', 'GraspPose');
            
            obj.JavaMessage.setGraspPose(grasppose.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.GraspPose)
                obj.Cache.GraspPose.setJavaObject(grasppose.getJavaObject);
            end
        end
        
        function graspdiameter = get.GraspDiameter(obj)
            %get.GraspDiameter Get the value for property GraspDiameter
            graspdiameter = double(obj.JavaMessage.getGraspDiameter);
        end
        
        function set.GraspDiameter(obj, graspdiameter)
            %set.GraspDiameter Set the value for property GraspDiameter
            validateattributes(graspdiameter, {'numeric'}, {'nonempty', 'scalar'}, 'VisionObject', 'GraspDiameter');
            
            obj.JavaMessage.setGraspDiameter(graspdiameter);
        end
        
        function material = get.Material(obj)
            %get.Material Get the value for property Material
            material = int8(obj.JavaMessage.getMaterial);
        end
        
        function set.Material(obj, material)
            %set.Material Set the value for property Material
            validateattributes(material, {'numeric'}, {'nonempty', 'scalar'}, 'VisionObject', 'Material');
            
            obj.JavaMessage.setMaterial(material);
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Header = [];
            obj.Cache.Pose = [];
            obj.Cache.GraspPose = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.Id = obj.Id;
            cpObj.Name = obj.Name;
            cpObj.GraspDiameter = obj.GraspDiameter;
            cpObj.Material = obj.Material;
            
            % Recursively copy compound properties
            cpObj.Header = copy(obj.Header);
            cpObj.Pose = copy(obj.Pose);
            cpObj.GraspPose = copy(obj.GraspPose);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Id = strObj.Id;
            obj.Name = strObj.Name;
            obj.GraspDiameter = strObj.GraspDiameter;
            obj.Material = strObj.Material;
            obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
            obj.Pose = feval([obj.GeometryMsgsPoseClass '.loadobj'], strObj.Pose);
            obj.GraspPose = feval([obj.GeometryMsgsPoseClass '.loadobj'], strObj.GraspPose);
        end
    end
    
    methods (Access = ?ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Id = obj.Id;
            strObj.Name = obj.Name;
            strObj.GraspDiameter = obj.GraspDiameter;
            strObj.Material = obj.Material;
            strObj.Header = saveobj(obj.Header);
            strObj.Pose = saveobj(obj.Pose);
            strObj.GraspPose = saveobj(obj.GraspPose);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.custom.msggen.irob_msgs.VisionObject.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = ros.custom.msggen.irob_msgs.VisionObject;
            obj.reload(strObj);
        end
    end
end
