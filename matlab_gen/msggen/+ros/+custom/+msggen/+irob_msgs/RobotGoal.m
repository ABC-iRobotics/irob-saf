classdef RobotGoal < ros.Message
    %RobotGoal MATLAB implementation of irob_msgs/RobotGoal
    %   This class was automatically generated by
    %   ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2019 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'irob_msgs/RobotGoal' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '85d5824e12773fd14aa26f53f4b0e846' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant)
        STOP = int8(1)
        INITARM = int8(2)
        RESETPOSE = int8(3)
        FOLLOWTRAJECTORY = int8(4)
        MOVEJOINT = int8(5)
    end
    
    properties (Constant, Access = protected)
        IrobMsgsTrajectoryToolPoseClass = ros.msg.internal.MessageFactory.getClassForType('irob_msgs/TrajectoryToolPose') % Dispatch to MATLAB class for message type irob_msgs/TrajectoryToolPose
        SensorMsgsJointStateClass = ros.msg.internal.MessageFactory.getClassForType('sensor_msgs/JointState') % Dispatch to MATLAB class for message type sensor_msgs/JointState
    end
    
    properties (Dependent)
        Action
        MoveAllowed
        Trajectory
        JointState
    end
    
    properties (Access = protected)
        Cache = struct('Trajectory', [], 'JointState', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Action', 'JointState', 'MoveAllowed', 'Trajectory'} % List of non-constant message properties
        ROSPropertyList = {'action', 'joint_state', 'move_allowed', 'trajectory'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = RobotGoal(msg)
            %RobotGoal Construct the message object RobotGoal
            import com.mathworks.toolbox.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('ros:mlros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('ros:mlros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('ros:mlros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function action = get.Action(obj)
            %get.Action Get the value for property Action
            action = int8(obj.JavaMessage.getAction);
        end
        
        function set.Action(obj, action)
            %set.Action Set the value for property Action
            validateattributes(action, {'numeric'}, {'nonempty', 'scalar'}, 'RobotGoal', 'Action');
            
            obj.JavaMessage.setAction(action);
        end
        
        function moveallowed = get.MoveAllowed(obj)
            %get.MoveAllowed Get the value for property MoveAllowed
            moveallowed = logical(obj.JavaMessage.getMoveAllowed);
        end
        
        function set.MoveAllowed(obj, moveallowed)
            %set.MoveAllowed Set the value for property MoveAllowed
            validateattributes(moveallowed, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'RobotGoal', 'MoveAllowed');
            
            obj.JavaMessage.setMoveAllowed(moveallowed);
        end
        
        function trajectory = get.Trajectory(obj)
            %get.Trajectory Get the value for property Trajectory
            if isempty(obj.Cache.Trajectory)
                obj.Cache.Trajectory = feval(obj.IrobMsgsTrajectoryToolPoseClass, obj.JavaMessage.getTrajectory);
            end
            trajectory = obj.Cache.Trajectory;
        end
        
        function set.Trajectory(obj, trajectory)
            %set.Trajectory Set the value for property Trajectory
            validateattributes(trajectory, {obj.IrobMsgsTrajectoryToolPoseClass}, {'nonempty', 'scalar'}, 'RobotGoal', 'Trajectory');
            
            obj.JavaMessage.setTrajectory(trajectory.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Trajectory)
                obj.Cache.Trajectory.setJavaObject(trajectory.getJavaObject);
            end
        end
        
        function jointstate = get.JointState(obj)
            %get.JointState Get the value for property JointState
            if isempty(obj.Cache.JointState)
                obj.Cache.JointState = feval(obj.SensorMsgsJointStateClass, obj.JavaMessage.getJointState);
            end
            jointstate = obj.Cache.JointState;
        end
        
        function set.JointState(obj, jointstate)
            %set.JointState Set the value for property JointState
            validateattributes(jointstate, {obj.SensorMsgsJointStateClass}, {'nonempty', 'scalar'}, 'RobotGoal', 'JointState');
            
            obj.JavaMessage.setJointState(jointstate.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.JointState)
                obj.Cache.JointState.setJavaObject(jointstate.getJavaObject);
            end
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Trajectory = [];
            obj.Cache.JointState = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.Action = obj.Action;
            cpObj.MoveAllowed = obj.MoveAllowed;
            
            % Recursively copy compound properties
            cpObj.Trajectory = copy(obj.Trajectory);
            cpObj.JointState = copy(obj.JointState);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Action = strObj.Action;
            obj.MoveAllowed = strObj.MoveAllowed;
            obj.Trajectory = feval([obj.IrobMsgsTrajectoryToolPoseClass '.loadobj'], strObj.Trajectory);
            obj.JointState = feval([obj.SensorMsgsJointStateClass '.loadobj'], strObj.JointState);
        end
    end
    
    methods (Access = ?ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Action = obj.Action;
            strObj.MoveAllowed = obj.MoveAllowed;
            strObj.Trajectory = saveobj(obj.Trajectory);
            strObj.JointState = saveobj(obj.JointState);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.custom.msggen.irob_msgs.RobotGoal.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = ros.custom.msggen.irob_msgs.RobotGoal;
            obj.reload(strObj);
        end
    end
end
