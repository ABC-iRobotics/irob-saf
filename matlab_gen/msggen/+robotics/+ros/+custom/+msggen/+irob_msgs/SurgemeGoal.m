classdef SurgemeGoal < robotics.ros.Message
    %SurgemeGoal MATLAB implementation of irob_msgs/SurgemeGoal
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2018 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'irob_msgs/SurgemeGoal' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '7a391bddeaa4f549d01f7c66b6d9916e' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant)
        STOP = int8(1)
        NAVTOPOS = int8(2)
        GRASP = int8(3)
        CUT = int8(4)
        PUSH = int8(5)
        DISSECT = int8(6)
        PLACE = int8(7)
        MANIPULATE = int8(8)
        RELEASE = int8(9)
        INTERPOLATIONLINEAR = int8(1)
        INTERPOLATIONBEZIER = int8(2)
    end
    
    properties (Constant, Access = protected)
        GeometryMsgsPointClass = robotics.ros.msg.internal.MessageFactory.getClassForType('geometry_msgs/Point') % Dispatch to MATLAB class for message type geometry_msgs/Point
        GeometryMsgsPoseClass = robotics.ros.msg.internal.MessageFactory.getClassForType('geometry_msgs/Pose') % Dispatch to MATLAB class for message type geometry_msgs/Pose
    end
    
    properties (Dependent)
        Action
        Target
        Interpolation
        ApproachPose
        TargetDiameter
        CompressionRate
        Displacement
        SpeedCartesian
        SpeedJaw
        Waypoints
    end
    
    properties (Access = protected)
        Cache = struct('Target', [], 'Waypoints', [], 'ApproachPose', [], 'Displacement', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Action', 'ApproachPose', 'CompressionRate', 'Displacement', 'Interpolation', 'SpeedCartesian', 'SpeedJaw', 'Target', 'TargetDiameter', 'Waypoints'} % List of non-constant message properties
        ROSPropertyList = {'action', 'approach_pose', 'compression_rate', 'displacement', 'interpolation', 'speed_cartesian', 'speed_jaw', 'target', 'target_diameter', 'waypoints'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = SurgemeGoal(msg)
            %SurgemeGoal Construct the message object SurgemeGoal
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function action = get.Action(obj)
            %get.Action Get the value for property Action
            action = int8(obj.JavaMessage.getAction);
        end
        
        function set.Action(obj, action)
            %set.Action Set the value for property Action
            validateattributes(action, {'numeric'}, {'nonempty', 'scalar'}, 'SurgemeGoal', 'Action');
            
            obj.JavaMessage.setAction(action);
        end
        
        function target = get.Target(obj)
            %get.Target Get the value for property Target
            if isempty(obj.Cache.Target)
                obj.Cache.Target = feval(obj.GeometryMsgsPoseClass, obj.JavaMessage.getTarget);
            end
            target = obj.Cache.Target;
        end
        
        function set.Target(obj, target)
            %set.Target Set the value for property Target
            validateattributes(target, {obj.GeometryMsgsPoseClass}, {'nonempty', 'scalar'}, 'SurgemeGoal', 'Target');
            
            obj.JavaMessage.setTarget(target.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Target)
                obj.Cache.Target.setJavaObject(target.getJavaObject);
            end
        end
        
        function interpolation = get.Interpolation(obj)
            %get.Interpolation Get the value for property Interpolation
            interpolation = int8(obj.JavaMessage.getInterpolation);
        end
        
        function set.Interpolation(obj, interpolation)
            %set.Interpolation Set the value for property Interpolation
            validateattributes(interpolation, {'numeric'}, {'nonempty', 'scalar'}, 'SurgemeGoal', 'Interpolation');
            
            obj.JavaMessage.setInterpolation(interpolation);
        end
        
        function approachpose = get.ApproachPose(obj)
            %get.ApproachPose Get the value for property ApproachPose
            if isempty(obj.Cache.ApproachPose)
                obj.Cache.ApproachPose = feval(obj.GeometryMsgsPoseClass, obj.JavaMessage.getApproachPose);
            end
            approachpose = obj.Cache.ApproachPose;
        end
        
        function set.ApproachPose(obj, approachpose)
            %set.ApproachPose Set the value for property ApproachPose
            validateattributes(approachpose, {obj.GeometryMsgsPoseClass}, {'nonempty', 'scalar'}, 'SurgemeGoal', 'ApproachPose');
            
            obj.JavaMessage.setApproachPose(approachpose.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.ApproachPose)
                obj.Cache.ApproachPose.setJavaObject(approachpose.getJavaObject);
            end
        end
        
        function targetdiameter = get.TargetDiameter(obj)
            %get.TargetDiameter Get the value for property TargetDiameter
            targetdiameter = double(obj.JavaMessage.getTargetDiameter);
        end
        
        function set.TargetDiameter(obj, targetdiameter)
            %set.TargetDiameter Set the value for property TargetDiameter
            validateattributes(targetdiameter, {'numeric'}, {'nonempty', 'scalar'}, 'SurgemeGoal', 'TargetDiameter');
            
            obj.JavaMessage.setTargetDiameter(targetdiameter);
        end
        
        function compressionrate = get.CompressionRate(obj)
            %get.CompressionRate Get the value for property CompressionRate
            compressionrate = double(obj.JavaMessage.getCompressionRate);
        end
        
        function set.CompressionRate(obj, compressionrate)
            %set.CompressionRate Set the value for property CompressionRate
            validateattributes(compressionrate, {'numeric'}, {'nonempty', 'scalar'}, 'SurgemeGoal', 'CompressionRate');
            
            obj.JavaMessage.setCompressionRate(compressionrate);
        end
        
        function displacement = get.Displacement(obj)
            %get.Displacement Get the value for property Displacement
            if isempty(obj.Cache.Displacement)
                obj.Cache.Displacement = feval(obj.GeometryMsgsPointClass, obj.JavaMessage.getDisplacement);
            end
            displacement = obj.Cache.Displacement;
        end
        
        function set.Displacement(obj, displacement)
            %set.Displacement Set the value for property Displacement
            validateattributes(displacement, {obj.GeometryMsgsPointClass}, {'nonempty', 'scalar'}, 'SurgemeGoal', 'Displacement');
            
            obj.JavaMessage.setDisplacement(displacement.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Displacement)
                obj.Cache.Displacement.setJavaObject(displacement.getJavaObject);
            end
        end
        
        function speedcartesian = get.SpeedCartesian(obj)
            %get.SpeedCartesian Get the value for property SpeedCartesian
            speedcartesian = double(obj.JavaMessage.getSpeedCartesian);
        end
        
        function set.SpeedCartesian(obj, speedcartesian)
            %set.SpeedCartesian Set the value for property SpeedCartesian
            validateattributes(speedcartesian, {'numeric'}, {'nonempty', 'scalar'}, 'SurgemeGoal', 'SpeedCartesian');
            
            obj.JavaMessage.setSpeedCartesian(speedcartesian);
        end
        
        function speedjaw = get.SpeedJaw(obj)
            %get.SpeedJaw Get the value for property SpeedJaw
            speedjaw = double(obj.JavaMessage.getSpeedJaw);
        end
        
        function set.SpeedJaw(obj, speedjaw)
            %set.SpeedJaw Set the value for property SpeedJaw
            validateattributes(speedjaw, {'numeric'}, {'nonempty', 'scalar'}, 'SurgemeGoal', 'SpeedJaw');
            
            obj.JavaMessage.setSpeedJaw(speedjaw);
        end
        
        function waypoints = get.Waypoints(obj)
            %get.Waypoints Get the value for property Waypoints
            if isempty(obj.Cache.Waypoints)
                javaArray = obj.JavaMessage.getWaypoints;
                array = obj.readJavaArray(javaArray, obj.GeometryMsgsPoseClass);
                obj.Cache.Waypoints = feval(obj.GeometryMsgsPoseClass, array);
            end
            waypoints = obj.Cache.Waypoints;
        end
        
        function set.Waypoints(obj, waypoints)
            %set.Waypoints Set the value for property Waypoints
            if ~isvector(waypoints) && isempty(waypoints)
                % Allow empty [] input
                waypoints = feval([obj.GeometryMsgsPoseClass '.empty'], 0, 1);
            end
            
            validateattributes(waypoints, {obj.GeometryMsgsPoseClass}, {'vector'}, 'SurgemeGoal', 'Waypoints');
            
            javaArray = obj.JavaMessage.getWaypoints;
            array = obj.writeJavaArray(waypoints, javaArray, obj.GeometryMsgsPoseClass);
            obj.JavaMessage.setWaypoints(array);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Waypoints)
                obj.Cache.Waypoints = [];
                obj.Cache.Waypoints = obj.Waypoints;
            end
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Target = [];
            obj.Cache.Waypoints = [];
            obj.Cache.ApproachPose = [];
            obj.Cache.Displacement = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.Action = obj.Action;
            cpObj.Interpolation = obj.Interpolation;
            cpObj.TargetDiameter = obj.TargetDiameter;
            cpObj.CompressionRate = obj.CompressionRate;
            cpObj.SpeedCartesian = obj.SpeedCartesian;
            cpObj.SpeedJaw = obj.SpeedJaw;
            
            % Recursively copy compound properties
            cpObj.Target = copy(obj.Target);
            cpObj.ApproachPose = copy(obj.ApproachPose);
            cpObj.Displacement = copy(obj.Displacement);
            cpObj.Waypoints = copy(obj.Waypoints);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Action = strObj.Action;
            obj.Interpolation = strObj.Interpolation;
            obj.TargetDiameter = strObj.TargetDiameter;
            obj.CompressionRate = strObj.CompressionRate;
            obj.SpeedCartesian = strObj.SpeedCartesian;
            obj.SpeedJaw = strObj.SpeedJaw;
            obj.Target = feval([obj.GeometryMsgsPoseClass '.loadobj'], strObj.Target);
            obj.ApproachPose = feval([obj.GeometryMsgsPoseClass '.loadobj'], strObj.ApproachPose);
            obj.Displacement = feval([obj.GeometryMsgsPointClass '.loadobj'], strObj.Displacement);
            WaypointsCell = arrayfun(@(x) feval([obj.GeometryMsgsPoseClass '.loadobj'], x), strObj.Waypoints, 'UniformOutput', false);
            obj.Waypoints = vertcat(WaypointsCell{:});
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Action = obj.Action;
            strObj.Interpolation = obj.Interpolation;
            strObj.TargetDiameter = obj.TargetDiameter;
            strObj.CompressionRate = obj.CompressionRate;
            strObj.SpeedCartesian = obj.SpeedCartesian;
            strObj.SpeedJaw = obj.SpeedJaw;
            strObj.Target = saveobj(obj.Target);
            strObj.ApproachPose = saveobj(obj.ApproachPose);
            strObj.Displacement = saveobj(obj.Displacement);
            strObj.Waypoints = arrayfun(@(x) saveobj(x), obj.Waypoints);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.irob_msgs.SurgemeGoal.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.irob_msgs.SurgemeGoal;
            obj.reload(strObj);
        end
    end
end
