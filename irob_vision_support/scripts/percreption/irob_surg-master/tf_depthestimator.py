import tensorflow as tf

class DeptEstimator(tf.keras.Model):
    def __init__(self):
        super(DeptEstimator, self).__init__(name="DepthEstimator")
        self.conv1_1 = tf.keras.layers.Conv2D(64, (3,3), padding='same', activation='relu',)
        self.conv1_1_batch = tf.keras.layers.BatchNormalization()
        self.conv1_2 = tf.layers.conv2d(64, (3, 3), padding='same', activation='relu')
        self.conv1_2_batch = tf.keras.layers.BatchNormalization()
        self.pool1 = tf.keras.layers.MaxPool2D(strides=(2, 2))

        self.conv2_1 = tf.layers.conv2d(128, (3, 3), padding='same', activation='relu')
        self.conv2_1_batch = tf.keras.layers.BatchNormalization()
        self.conv2_2 = tf.layers.conv2d(128, (3, 3), padding='same', activation='relu')
        self.conv2_2_batch = tf.keras.layers.BatchNormalization()
        self.pool2 = tf.keras.layers.MaxPool2D(strides=(2, 2))

        self.conv3_1 = tf.layers.conv2d(256, (3, 3), padding='same', activation='relu')
        self.conv3_1_batch = tf.keras.layers.BatchNormalization()
        self.conv3_2 = tf.layers.conv2d(256, (3, 3), padding='same', activation='relu')
        self.conv3_2_batch = tf.keras.layers.BatchNormalization()
        self.conv3_3 = tf.layers.conv2d(256, (3, 3), padding='same', activation='relu')
        self.conv3_3_batch = tf.keras.layers.BatchNormalization()
        self.pool3 = tf.keras.layers.MaxPool2D(strides=(2, 2))

        self.conv4_1 = tf.layers.conv2d(512, (3, 3), padding='same', activation='relu')
        self.conv4_1_batch = tf.keras.layers.BatchNormalization()
        self.conv4_2 = tf.layers.conv2d(512, (3, 3), padding='same', activation='relu')
        self.conv4_2_batch = tf.keras.layers.BatchNormalization()
        self.conv4_3 = tf.layers.conv2d(512, (3, 3), padding='same', activation='relu')
        self.conv4_3_batch = tf.keras.layers.BatchNormalization()
        self.pool4 = tf.keras.layers.MaxPool2D(strides=(2, 2))

        self.conv5_1 = tf.layers.conv2d(512, (3, 3), padding='same', activation='relu')
        self.conv5_1_batch = tf.keras.layers.BatchNormalization()
        self.conv5_2 = tf.layers.conv2d(512, (3, 3), padding='same', activation='relu')
        self.conv5_2_batch = tf.keras.layers.BatchNormalization()
        self.conv5_3 = tf.layers.conv2d(512, (3, 3), padding='same', activation='relu')
        self.conv5_3_batch = tf.keras.layers.BatchNormalization()
        self.pool5 = tf.keras.layers.MaxPool2D(strides=(2, 2))

        self.conv6 = tf.layers.conv2d(512, (3, 3), padding='same', activation='relu')
        self.conv6_batch = tf.keras.layers.BatchNormalization()
        self.up5 = tf.keras.layers.UpSampling2D()

        self.deconv5_1 = tf.layers.Conv2DTranspose(512, (3, 3), activation='relu', padding='same')
        self.deconv5_1_batch = tf.keras.layers.BatchNormalization()
        self.deconv5_2 = tf.layers.Conv2DTranspose(512, (3, 3), activation='relu', padding='same')
        self.deconv5_2_batch = tf.keras.layers.BatchNormalization()
        self.deconv5_3 = tf.layers.Conv2DTranspose(512, (3, 3), activation='relu', padding='same')
        self.deconv5_3_batch = tf.keras.layers.BatchNormalization()
        self.up4 = tf.keras.layers.UpSampling2D()

        self.deconv4_1 = tf.layers.Conv2DTranspose(512, (3, 3), activation='relu', padding='same')
        self.deconv4_1_batch = tf.keras.layers.BatchNormalization()
        self.deconv4_2 = tf.layers.Conv2DTranspose(512, (3, 3), activation='relu', padding='same')
        self.deconv4_2_batch = tf.keras.layers.BatchNormalization()
        self.deconv4_3 = tf.layers.Conv2DTranspose(256, (3, 3), activation='relu', padding='same')
        self.deconv4_3_batch = tf.keras.layers.BatchNormalization()
        self.up3 = tf.keras.layers.UpSampling2D()

        self.deconv3_1 = tf.layers.Conv2DTranspose(256, (3, 3), activation='relu', padding='same')
        self.deconv3_1_batch = tf.keras.layers.BatchNormalization()
        self.deconv3_2 = tf.layers.Conv2DTranspose(256, (3, 3), activation='relu', padding='same')
        self.deconv3_2_batch = tf.keras.layers.BatchNormalization()
        self.deconv3_3 = tf.layers.Conv2DTranspose(128, (3, 3), activation='relu', padding='same')
        self.deconv3_3_batch = tf.keras.layers.BatchNormalization()
        self.up2 = tf.keras.layers.UpSampling2D()

        self.deconv2_1 = tf.layers.Conv2DTranspose(128, (3, 3), activation='relu', padding='same')
        self.deconv2_1_batch = tf.keras.layers.BatchNormalization()
        self.deconv2_2 = tf.layers.Conv2DTranspose(64, (3, 3), activation='relu', padding='same')
        self.deconv2_2_batch = tf.keras.layers.BatchNormalization()
        self.up1 = tf.keras.layers.UpSampling2D()

        self.deconv1_1 = tf.layers.Conv2DTranspose(64, (3, 3), activation='relu', padding='same')
        self.deconv1_1_batch = tf.keras.layers.BatchNormalization()
        self.deconv1_2 = tf.layers.Conv2DTranspose(3, (3, 3), activation='relu', padding='same')
        self.deconv1_2_batch = tf.keras.layers.BatchNormalization()

        self.deconv0 = tf.layers.Conv2DTranspose(1, (3, 3), activation='relu', padding='same')
        self.deconv0_batch = tf.keras.layers.BatchNormalization()

    def call(self, inputs, training=False, mask=None):
        x = self.conv1_1(inputs)
        x = self.conv1_1_batch(x)
        x = self.conv1_2(x)
        x = self.conv1_2_batch(x)
        x = self.pool1(x)

        x = self.conv2_1(x)
        x = self.conv2_1_batch(x)
        x = self.conv2_2(x)
        x = self.conv2_2_batch(x)
        x = self.pool2(x)

        x = self.conv3_1(x)
        x = self.conv3_1_batch(x)
        x = self.conv3_2(x)
        x = self.conv3_2_batch(x)
        x = self.conv3_3(x)
        x = self.conv3_3_batch(x)
        x = self.pool3(x)

        x = self.conv4_1(x)
        x = self.conv4_1_batch(x)
        x = self.conv4_2(x)
        x = self.conv4_2_batch(x)
        x = self.conv4_3(x)
        x = self.conv4_3_batch(x)
        x = self.pool4(x)

        x = self.conv5_1(x)
        x = self.conv5_1_batch(x)
        x = self.conv5_2(x)
        x = self.conv5_2_batch(x)
        x = self.conv5_3(x)
        x = self.conv5_3_batch(x)
        x = self.pool5(x)

        x = self.conv6(x)
        x = self.conv6_batch(x)
        x = self.up5(x)

        x = self.deconv5_1(x)
        x = self.deconv5_1_batch(x)
        x = self.deconv5_2(x)
        x = self.deconv5_2_batch(x)
        x = self.deconv5_3(x)
        x = self.deconv5_3_batch(x)
        x = self.up4(x)

        x = self.deconv4_1(x)
        x = self.deconv4_1_batch(x)
        x = self.deconv4_2(x)
        x = self.deconv4_2_batch(x)
        x = self.deconv4_3(x)
        x = self.deconv4_3_batch(x)
        x = self.up3(x)

        x = self.deconv3_1(x)
        x = self.deconv3_1_batch(x)
        x = self.deconv3_2(x)
        x = self.deconv3_2_batch(x)
        x = self.deconv3_3(x)
        x = self.deconv3_3_batch(x)
        x = self.up2(x)

        x = self.deconv2_1(x)
        x = self.deconv2_1_batch(x)
        x = self.deconv2_2(x)
        x = self.deconv2_2_batch(x)
        x = self.up1(x)

        x = self.deconv1_1(x)
        x = self.deconv1_1_batch(x)
        x = self.deconv1_2(x)
        x = self.deconv1_2_batch(x)

        x = self.deconv0(x)
        x = self.deconv0_batch(x)
        return x
